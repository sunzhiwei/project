package com.gome.gmhx.controller.materialmanage;
import java.net.URLDecoder;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.gome.common.Constrants;
import com.gome.common.bean.ViewExcel;
import com.gome.common.page.Page;
import com.gome.common.util.BeanMapUtils;
import com.gome.common.util.DateUtils;
import com.gome.common.util.DecoderUtil;
import com.gome.common.util.JsonHelper;
import com.gome.common.util.JsonUtil;
import com.gome.common.util.UUIDGenerator;
import com.gome.gmhx.entity.HxParcelDelivery;
import com.gome.gmhx.entity.SysUser;
import com.gome.gmhx.service.materialmanage.HxParcelDeliveryService;

@Controller
@RequestMapping(value="/ParcelDelivery")
public class HxParcelDeliveryController {
	@Resource
	private HxParcelDeliveryService ParcelDeliveryService ;
	
	
	@RequestMapping(value="/ParcelDeliveryView")
	private String ParcelDeliveryView(){
		
		return "materialmanage/hxParcelDelivery/hxParcelDeliveryList";
		
	}  
	@RequestMapping(value="/getParcelDeliveryPageList", produces="text/plain;charset=utf-8")
	@ResponseBody
	public String getParcelDeliveryPageList(Page page, HxParcelDelivery parcel,HttpServletRequest request,
			@DateTimeFormat(pattern="yyyy-MM-dd")Date updateDate_sta,
			@DateTimeFormat(pattern="yyyy-MM-dd")Date updateDate_end)throws Exception{
		SysUser sysUser = (SysUser) request.getSession().getAttribute(Constrants.USER_INFO);
		Map<String, Object> map = BeanMapUtils.convertBean(parcel);
	    map.put("billsCode", sysUser.getFittingOrgId());
		map.put("updateDate_sta", updateDate_sta);
		map.put("updateDate_end", updateDate_end);
		page.setParam(map);
		List<Map<String, Object>> list = ParcelDeliveryService.getParcelDeliveryPageList(page);
		return JsonUtil.writeListToDataGrid(page.getTotalResult(), list);
	}
	/*
	 * 获取申请单号
	 */
	private synchronized String getListNumber(String companyId){
		StringBuilder sb = new StringBuilder("SQ-");
		sb.append(companyId);
		sb.append("-");
		String date = DateUtils.formatDateTime(new Date(), DateUtils.EIGHT_STYLE_DATE_FORMAT);
		sb.append(date.substring(2, 8));
		sb.append(ParcelDeliveryService.getListNumber(companyId));
		return sb.toString();
	}
	
	/*
	 * 获取邮包编号
	 */
	private synchronized String getParcelCode(String number){
		StringBuilder sb = new StringBuilder("HX_");
		String date = DateUtils.formatDateTime(new Date(), DateUtils.EIGHT_STYLE_DATE_FORMAT);
		sb.append(date.substring(2, 8));
		sb.append(ParcelDeliveryService.getParcelCode(number));
		return sb.toString();
	}
  
	
	@RequestMapping(value="/addView")
	public String addView(){
		return  "materialmanage/hxParcelDelivery/hxParcelDeliveryAdd";
	}
	
	
	
	
	@RequestMapping(value="addHxParcelDelivery")
	@ResponseBody
	public String addHxParcelDelivery(HxParcelDelivery parcel,HttpServletRequest request){
      
        	SysUser sysuser = (SysUser)request.getSession().getAttribute(Constrants.USER_INFO);
		    String  orgId= UUIDGenerator.getUUID();
		    parcel.setOrgId(orgId); 
		    parcel.setFounderDate(new Date());
		    parcel.setParcelCode(getParcelCode(sysuser.getFittingOrgId()));
		    //2014-09-23
		    String createPerson = sysuser.getUserName();
		    parcel.setFounders(createPerson);
		    parcel.setModefieds(createPerson);
		    parcel.setCompanyId(sysuser.getFittingOrgId());
		    parcel.setSendUnit(sysuser.getCompanyName());
		    parcel.setListNumber(getListNumber(sysuser.getFittingOrgId()));
		    parcel.setUpdateDate(new Date());			
		    //2014-09-23
			Map<String, Object> map = new HashMap<String, Object>();
			//map = BeanMapUtils.convertBean(parcel);
		    try {
		    	map = BeanMapUtils.convertBean(parcel);
        	ParcelDeliveryService.addHxParcelDelivery(map);
            return "{\"flag\" : \"success\",\"parcelCode\" : \"" + parcel.getParcelCode() + "\"}";
        } catch (Exception e) {
            e.printStackTrace();
          
        }
        return null;
    }
	
	/*
	 * 
	 * 修改数据
	 */
	@RequestMapping(value="/updateView/{parcelCode}", produces = "text/plain;charset=utf-8")
	@ResponseBody
	public ModelAndView updateView(@PathVariable String parcelCode){
		ModelAndView mav = new ModelAndView("materialmanage/hxParcelDelivery/hxParcelDeliveryUpdate");
		HxParcelDelivery parcel = ParcelDeliveryService.getsendById(parcelCode);
		mav.addObject("parcel", parcel);
		return mav;
	}
	
	@RequestMapping(value="updateParcelDelivery")
	@ResponseBody
	public String updateParcelDelivery(HxParcelDelivery parcel,HttpServletRequest request){
		try
		{
		 SysUser sysuser = (SysUser)request.getSession().getAttribute(Constrants.USER_INFO);	
		 parcel.setParcelCode(getParcelCode(sysuser.getFittingOrgId()));
		 ParcelDeliveryService.updateParcelDelivery(parcel);
		  return "{\"flag\" : \"success\",\"parcelCode\" : \"" + parcel.getParcelCode() + "\"}";
	}catch(Exception e1)
	{
		e1.printStackTrace();
	}
		 return null;
		}
	 
@RequestMapping(value="/SendParcelView")
@ResponseBody
public ModelAndView SendParcelView(String parcelCode){
 		ModelAndView mav = new ModelAndView("materialmanage/hxParcelDelivery/hxParcelDeliverySend");
		HxParcelDelivery parcel = ParcelDeliveryService.getsendById(parcelCode);
		mav.addObject("parcel", parcel);
		// 02="已发送";03="已收货";01="已录入"
		if("已发送".equals(parcel.getState()) || "已收货".equals(parcel.getState())){
			mav.addObject("isEdit", false);
			mav.addObject("isSend", false);
		}else{
			mav.addObject("isEdit", true);
			mav.addObject("isSend", true);
		}
		return mav;
	}

//发货 
@RequestMapping(value="/sendView")//预留
public ModelAndView sendView(@PathVariable(value = "parcelCode") String parcelCode){
	ModelAndView mav = new ModelAndView("materialmanage/hxParcelDelivery/hxParcelDeliverySendShow");
	HxParcelDelivery parcel = ParcelDeliveryService.getsendById(parcelCode);
	mav.addObject("parcel", parcel);
	return mav;
}

@RequestMapping(value="/sendViewShow")//发货
@ResponseBody
//public String sendViewShow(String parcelCode){
  public String sendViewShow(HxParcelDelivery parcel){
		Map<String, String> map = new HashMap<String, String>();
		map.put("parcelCode", parcel.getParcelCode());
		map.put("state", "02");
		map.put("packageNumber", parcel.getPackageNumber());
		map.put("receiveUnit", parcel.getReceiveUnit());
		try {
		ParcelDeliveryService.updateHxCurrentStock(map);//先修改库存
	//	HxParcelDelivery parcel =ParcelDeliveryService.updateHxCurrentStock(parcelCode);//先修改库存
		ParcelDeliveryService.updatesendParcelDelivery(map);//修改邮包状态等
		//ParcelDeliveryService.updateHxCurrentStock(parcel);
		return "success";
  } catch (Exception e) {
      e.printStackTrace();
      return "failure";
  }

}
//发货 



//显示效果
	@RequestMapping(value="/showView/{parcelCode}")
	public ModelAndView showView(@PathVariable(value = "parcelCode") String parcelCode){
		ModelAndView mav = new ModelAndView("materialmanage/hxParcelDelivery/hxParcelDeliveryShow");
		HxParcelDelivery parcel = ParcelDeliveryService.getHxParcelDeliveryById(parcelCode);
		mav.addObject("parcel", parcel);
		return mav;
	}
	
	
	@RequestMapping(value="/exportExcel")
	public ModelAndView exportExcel(HxParcelDelivery parcel, String tableField, String tableHeader, HttpServletRequest request, HttpServletResponse response) throws Exception{
		new DecoderUtil<HxParcelDelivery>().decodeURI(parcel);
		String header = URLDecoder.decode(tableHeader, "UTF-8");
		List<Map<String, Object>> list = ParcelDeliveryService.getParcelDeliveryExport(parcel);
		ViewExcel viewExcel = new ViewExcel("邮包信息导出" + DateUtils.formatDateTime(new Date(), DateUtils.FORMAT_THREE), tableField, header, list);
		return new ModelAndView(viewExcel);
	}
	
	@RequestMapping(value="/getOrgnazationBySuit", produces="text/plain;charset=utf-8")
	@ResponseBody
	public String getOrgnazationBySuit(String receiveUnit){
		List<String> list = ParcelDeliveryService.getOrgnazationBySuit(receiveUnit);
		JSONArray array = new JSONArray();
		for(String str : list){
			JSONObject object = new JSONObject();
			object.put("value", str);
			object.put("text", str);
			array.add(object);
		}
		return array.toString();
	}
	
	@RequestMapping(value="/getApplayCodeList", produces="text/plain;charset=utf-8")
	@ResponseBody
	public String getApplayCodeList(Page page, HxParcelDelivery parcel,HttpServletRequest request)throws Exception{
		page.setParam(parcel);
		List<Map<String, Object>> list = ParcelDeliveryService.getApplayCodeList(page);
		return JsonUtil.writeListToDataGrid(page.getTotalResult(), list);
	
	}
	
	@RequestMapping(value="/getParcelDeliveryDetail/{parcelCode}", produces="text/plain;charset=utf-8")
	@ResponseBody
	public String getParcelDeliveryDetail(@PathVariable String parcelCode) throws Exception{
		List<Map<String, Object>> list = ParcelDeliveryService.getParcelDeliveryDetail(parcelCode);
		JSONObject object = new JSONObject();
    	object.put("total", list.size());
    	object.put("rows", JsonHelper.getJsonString4Object(JsonUtil.toGJson(list), "yyyy-MM-dd HH:mm:ss"));
		return object.toString();
	}
	
	@RequestMapping(value="/delParcelDelivery")
	@ResponseBody
	public String delParcelDelivery(String parcelCode) throws Exception{
		try{
			ParcelDeliveryService.delParcelDelivery(parcelCode);
			return "success";
		}catch(Exception e){
			e.printStackTrace();
			return "failure";
		}
	}
}
