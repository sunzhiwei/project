package com.gome.gmhx.service.wsdl.service.impl;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.gome.gmhx.dao.basicdata.HxBarCodeRulesDao;
import com.gome.gmhx.dao.basicdata.HxCodeBarDao;
import com.gome.gmhx.dao.basicdata.HxProductDetailDao;
import com.gome.gmhx.dao.wsdl.EccDao;
import com.gome.gmhx.entity.EccBrand;
import com.gome.gmhx.entity.EccGoods;
import com.gome.gmhx.entity.EccGoodsCategory;
import com.gome.gmhx.entity.EccRegional;
import com.gome.gmhx.entity.EccRegionalSection;
import com.gome.gmhx.entity.EccSalesOrg;
import com.gome.gmhx.entity.EccSectionMapping;
import com.gome.gmhx.entity.EccStore;
import com.gome.gmhx.entity.HxBarCodeRules;
import com.gome.gmhx.entity.HxCodeBar;
import com.gome.gmhx.entity.HxProductDetail;
import com.gome.gmhx.entity.ValidateEccBarCode;
import com.gome.gmhx.service.wsdl.service.EccService;

@Service("eccService")
public class EccServiceImpl implements EccService {
	@Resource
	private EccDao eccDao;
	@Resource
	private HxProductDetailDao hxProductDetailDao;
	@Resource
	private HxBarCodeRulesDao hxBarCodeRulesDao;
	
	private HxCodeBarDao hxCodeBarDao;

	@Override
	public void handleEccBrand(List<EccBrand> list) {
		eccDao.clearEccBrand();
		eccDao.insertEccBrand(list);
	}

	@Override
	public void handleEccGoods(List<EccGoods> list) {
		eccDao.replaceEccGoods(list);
	}

	@Override
	public void handleEccGoodsCategory(List<EccGoodsCategory> list) {
		eccDao.clearEccGoodsCategory();
		eccDao.insertEccGoodsCategory(list);
	}

	@Override
	public void handleEccRegional(List<EccRegional> list) {
		eccDao.clearEccRegional();
		eccDao.insertEccRegional(list);
	}

	@Override
	public void handleEccRegionalSection(List<EccRegionalSection> list) {
		eccDao.clearEccRegionalSection();
		eccDao.insertEccRegionalSection(list);
	}

	@Override
	public void handleEccSalesOrg(List<EccSalesOrg> list) {
		eccDao.clearEccSalesOrg();
		eccDao.insertEccSalesOrg(list);
	}

	@Override
	public void handleEccSectionMapping(List<EccSectionMapping> list) {
		eccDao.clearEccSectionMapping();
		eccDao.insertEccSectionMapping(list);
	}

	@Override
	public void handleEccStore(List<EccStore> list) {
		eccDao.clearEccStore();
		eccDao.insertEccStore(list);
	}

	@Override
	public String validateHxBarCode(ValidateEccBarCode vebc) {
		/*
		 * 1.根据机型代码查询国美代码(厂家品牌机型的一个标识)
		 * 2.根据机型代码在条形码对照表中获取该机型的条形码校验规则并进行校验。
		 * 3.根据国美代码在条形码规则配置表中查询条形码校验规则并进行校验
		 * */
		StringBuffer message = new StringBuffer();
		try{
			if(vebc.getBarCode()==null||"".equals(vebc.getBarCode())){
				message.append("条形码不能为空！");
				return message.toString();
			}
			
			if(vebc.getMachineModeCode()==null||"".equals(vebc.getMachineModeCode())){
				message.append("机型代码不能为空！");
				return message.toString();
			}
			
			if(vebc.getMachineType()==null||"".equals(vebc.getMachineType())){
				message.append("机型类型不能为空！");
				return message.toString();
			}
			//条形码对照校验
			List<HxCodeBar> hxCodeBars  = this.hxCodeBarDao.getHxCodeBarByWholeModel(vebc.getMachineModeCode());
			if(hxCodeBars.size()>1){
				message.append("该机型条形码对照配置信息多余1条！");
				return message.toString();
			}else if(hxCodeBars.isEmpty()){
				message.append("该机型条形码对照配置信息不存在！");
				return message.toString();
			}
			HxCodeBar hxCodeBar = hxCodeBars.get(0);
			String validateData =   "";//vebc.getBarCode().substring(hxCodeBar.getCodeBegin()-1);
			if("G1".equals(vebc.getMachineType())){
				if(!validateData.startsWith(hxCodeBar.getInnerCode1())){
					message.append("条形码对照内机1验证错误！");
					return message.toString();
				}
			}else if("G2".equals(vebc.getMachineType())){
				if(!validateData.startsWith(hxCodeBar.getInnerCode2())){
					message.append("条形码对照内机2验证错误！");
					return message.toString();
				}
			}else if("W".equals(vebc.getMachineType())){
				if(!validateData.startsWith(hxCodeBar.getOuterCode())){
					message.append("条形码对照外机验证错误！");
					return message.toString();
				}
			}
			
			//校验条形码规则配置
			List<HxProductDetail>  hxProductDetails = this.hxProductDetailDao.getHxProductDetailByMode(vebc.getBarCode());
			if(hxProductDetails.size()>1){
				message.append("该机型产品资料配置信息多余1条！");
				return message.toString();
			}else if(hxProductDetails.isEmpty()){
				message.append("该机型产品资料配置信息不存在！");
				return message.toString();
			}
			HxProductDetail hxProductDetail = hxProductDetails.get(0);
			String gomeCode = hxProductDetail.getGomeCode();
			List<HxBarCodeRules> hxBarCodeRules = this.hxBarCodeRulesDao.getHxBarCodeRulesByGomeCode(gomeCode);
			
			if(hxProductDetails.size()>1){
				message.append("该机型条形码规则配置信息多余1条！");
				return message.toString();
			}else if(hxProductDetails.isEmpty()){
				message.append("该机型条形码规则配置信息不存在！");
				return message.toString();
			}
			HxBarCodeRules hxBarCodeRule = hxBarCodeRules.get(0);
			
			if(vebc.getMachineModeCode().length()!=hxBarCodeRule.getBarCodeNumber()){
				message.append("条形码位数不正确！");
				return message.toString();
			}
			if(vebc.getMachineType().startsWith("G")){
				//校验内机位
				if(!vebc.getMachineModeCode().substring(hxBarCodeRule.getInsideMachine()-1).matches("^[("+hxBarCodeRule.getInsideMachineContent().replace(";",")(")+")][\\d\\w]+")){
					message.append("内机位校验不正确！");
					return message.toString();
				}
				
				if(hxBarCodeRule.getInsideMachineOne()!=null&&hxBarCodeRule.getInsideMachineContentOne()!=null&&!"".equals(hxBarCodeRule.getInsideMachineContentOne())){
					//校验内机1
					if(!vebc.getMachineModeCode().substring(hxBarCodeRule.getInsideMachineOne()-1).matches("^[("+hxBarCodeRule.getInsideMachineContentOne().replace(";",")(")+")][\\d\\w]+")){
						message.append("内机位1校验不正确！");
						return message.toString();
					}
				}
				//校验内机2
				if(hxBarCodeRule.getInsideMachineTwo()!=null&&hxBarCodeRule.getInsideMachineContentTwo()!=null&&!"".equals(hxBarCodeRule.getInsideMachineContentTwo())){
					//校验内机2
					if(!vebc.getMachineModeCode().substring(hxBarCodeRule.getInsideMachineTwo()-1).matches("^[("+hxBarCodeRule.getInsideMachineContentTwo().replace(";",")(")+")][\\d\\w]+")){
						message.append("内机位2校验不正确！");
						return message.toString();
					}
				}
			}else if("W".equals(vebc.getMachineType())){
				//校验外机位
				if(!vebc.getMachineModeCode().substring(hxBarCodeRule.getOutsideMachine()-1).matches("^[("+hxBarCodeRule.getOutsideMachineContent().replace(";",")(")+")][\\d\\w]+")){
					message.append("外机位校验不正确！");
					return message.toString();
				}
				
				if(hxBarCodeRule.getOutsideMachineOne()!=null&&hxBarCodeRule.getOutsideMachineContentOne()!=null&&!"".equals(hxBarCodeRule.getOutsideMachineContentOne())){
					//校验内机1
					if(!vebc.getMachineModeCode().substring(hxBarCodeRule.getOutsideMachineOne()-1).matches("^[("+hxBarCodeRule.getOutsideMachineContentOne().replace(";",")(")+")][\\d\\w]+")){
						message.append("外机位1校验不正确！");
						return message.toString();
					}
				}
				//校验内机2
				if(hxBarCodeRule.getOutsideMachineTwo()!=null&&hxBarCodeRule.getOutsideMachineContentTwo()!=null&&!"".equals(hxBarCodeRule.getOutsideMachineContentTwo())){
					//校验内机2
					if(!vebc.getMachineModeCode().substring(hxBarCodeRule.getOutsideMachineTwo()-1).matches("^[("+hxBarCodeRule.getOutsideMachineContentTwo().replace(";",")(")+")][\\d\\w]+")){
						message.append("外机位2校验不正确！");
						return message.toString();
					}
				}
			}
		}catch(Exception e){
			message.append(e.getMessage());
			e.printStackTrace();
		}
		return message.toString();
	}

}
