package com.gome.gmhx.service.common.impl;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;

import com.gome.gmhx.dao.basicdata.HxBarCodeRulesDao;
import com.gome.gmhx.dao.basicdata.HxCodeBarDao;
import com.gome.gmhx.dao.basicdata.HxProductDetailDao;
import com.gome.gmhx.dao.wsdl.EccDao;
import com.gome.gmhx.entity.HxBarCodeRules;
import com.gome.gmhx.entity.HxCodeBar;
import com.gome.gmhx.entity.HxProductDetail;
import com.gome.gmhx.service.common.MachineReviewService;
@Service("machineReviewService")
public class MachineReviewServiceImpl implements MachineReviewService {
	
	private static Map<String,String> config;
	
	static{
		config = new HashMap<String,String>();
		config.put("N-5","\\d{5}");
		config.put("YYYYMM","\\d{6}");
	}
	
	@Resource
	private EccDao eccDao;
	@Resource
	private HxProductDetailDao hxProductDetailDao;
	@Resource
	private HxBarCodeRulesDao hxBarCodeRulesDao;
	@Resource
	private HxCodeBarDao hxCodeBarDao;
	
	@Override
	public String machineRecevie(String serviceId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String barCodeVerification(String machineModeCode, String barCode) {
		/*
		 * 1.根据机型代码查询国美代码
		 * 2.根据机型代码在条形码对照表中获取该机型的条形码校验规则并进行校验。
		 * 3.根据国美代码在条形码规则配置表中查询条形码校验规则并进行校验
		 * 
		 * 
		 * 1.机型代码中含有W/的为三洋空调外机，匹配外机条码
		 * 2.机型代码中含有G/的为三洋空调内机，匹配内机条码
		 * 3.机型代码中含有-W的为伊莱克斯空调外机，匹配外机条码
		 * 4.机型代码中含有-G的为伊莱克斯空调内机，匹配内机条码
		 * 5.其他为伊莱克斯热水器 匹配内机条码
		 * */
		
		StringBuffer message = new StringBuffer();
		try{
			String barCodeType = null;
			if(machineModeCode.indexOf("W/")>-1||machineModeCode.indexOf("-W")>-1){
				barCodeType="W";
			}else if(machineModeCode.indexOf("G/")>-1||machineModeCode.indexOf("-G")>-1){
				barCodeType="G";
			}else{
				barCodeType="G";
			}
			//条形码对照校验
			List<HxCodeBar> hxCodeBars  = this.hxCodeBarDao.getHxCodeBarByMachineCode(machineModeCode);
			if(hxCodeBars.isEmpty()){
				message.append("该机型条形码对照配置信息不存在！");
				return message.toString();
			}
			
			for(int i=0;i<hxCodeBars.size();i++){
				HxCodeBar hxCodeBar = hxCodeBars.get(i);
				String systemBarCode = null;
				if(StringUtils.isNotEmpty(hxCodeBar.getInnerCode1().trim())&&barCodeType.equals("G")){
					systemBarCode = hxCodeBar.getInnerCode1().trim();
				}else if(StringUtils.isNotEmpty(hxCodeBar.getInnerCode2().trim())&&barCodeType.equals("G")){
					systemBarCode = hxCodeBar.getInnerCode2().trim();
				}else if(StringUtils.isNotEmpty(hxCodeBar.getOuterCode().trim())&&barCodeType.equals("W")){
					systemBarCode = hxCodeBar.getOuterCode();
				}
				
				int begin = 0;
				//17-1/18-2情况
				if(hxCodeBar.getCodeBegin().indexOf("/")>-1){
					String[] codeBegins = hxCodeBar.getCodeBegin().split("/");
					for(String codeBegin:codeBegins){
						if(barCode.length()==Integer.parseInt(codeBegin.split("-")[0])){
							begin = Integer.parseInt(codeBegin.split("-")[1])-1;
							break;
						}
					}
					
				}else{
					begin = Integer.parseInt(hxCodeBar.getCodeBegin())-1;
				}
				
				if(barCode.substring(begin).matches("^("+systemBarCode.replace(";","|")+")\\w+")){
						break;
				}else{
					if(i==hxCodeBars.size()-1){
						message.append("条形码对照表匹配错误！");
						return message.toString();
					}
				}
			}

			//校验条形码规则配置
			List<HxProductDetail>  hxProductDetails = this.hxProductDetailDao.getHxProductDetailByMode(machineModeCode);
			if(hxProductDetails.isEmpty()){
				message.append("该机型产品资料配置信息不存在！");
				return message.toString();
			}
			HxProductDetail hxProductDetail = hxProductDetails.get(0);
			String gomeCode = hxProductDetail.getGomeCode();
			List<HxBarCodeRules> hxBarCodeRules = this.hxBarCodeRulesDao.getHxBarCodeRulesByGomeCode(gomeCode);
			
			if(hxProductDetails.isEmpty()){
				message.append("该机型条形码规则配置信息不存在！");
				return message.toString();
			}
			
			for(int i=0;i<hxBarCodeRules.size();i++){
				HxBarCodeRules hxBarCodeRule = hxBarCodeRules.get(i);
				boolean flag = false;
				if(barCodeType.equals("G")){
					//校验内机位
					if(hxBarCodeRule.getInsideMachine()!=null&&StringUtils.isNotEmpty(hxBarCodeRule.getInsideMachineContent())){
						if(barCode.substring(hxBarCodeRule.getInsideMachine()-1).matches("^("+regularConvert(hxBarCodeRule.getInsideMachineContent()).replace(";","|")+")\\w+")){
							flag =true;
						}
					}
					if(hxBarCodeRule.getInsideMachineOne()!=null&&StringUtils.isNotEmpty(hxBarCodeRule.getInsideMachineContentOne())){
						//校验内机1
						if(barCode.substring(hxBarCodeRule.getInsideMachineOne()-1).matches("^("+regularConvert(hxBarCodeRule.getInsideMachineContentOne()).replace(";","|")+")\\w+")){
							flag =true;
						}
					}
					if(hxBarCodeRule.getInsideMachineTwo()!=null&&StringUtils.isNotEmpty(hxBarCodeRule.getInsideMachineContentTwo())){
						//校验内机2
						if(barCode.substring(hxBarCodeRule.getInsideMachineTwo()-1).matches("^("+regularConvert(hxBarCodeRule.getInsideMachineContentTwo()).replace(";","|")+")\\w+")){
							flag =true;
						}
					}
				}else if(barCodeType.equals("W")){
					//校验外机位
					if(hxBarCodeRule.getOutsideMachine()!=null&&StringUtils.isNotEmpty(hxBarCodeRule.getOutsideMachineContent())){
						if(barCode.substring(hxBarCodeRule.getOutsideMachine()-1).matches("^("+regularConvert(hxBarCodeRule.getOutsideMachineContent()).replace(";","|")+")\\w+")){
							flag =true;
						}
					}
					if(hxBarCodeRule.getOutsideMachineOne()!=null&&hxBarCodeRule.getOutsideMachineContentOne()!=null&&!"".equals(hxBarCodeRule.getOutsideMachineContentOne())){
						//校验内机1
						if(barCode.substring(hxBarCodeRule.getOutsideMachineOne()-1).matches("^("+regularConvert(hxBarCodeRule.getOutsideMachineContentOne()).replace(";","|")+")\\w+")){
							flag =true;
						}
					}
					if(hxBarCodeRule.getOutsideMachineTwo()!=null&&hxBarCodeRule.getOutsideMachineContentTwo()!=null&&!"".equals(hxBarCodeRule.getOutsideMachineContentTwo())){
						//校验内机2
						if(barCode.substring(hxBarCodeRule.getOutsideMachineTwo()-1).matches("^("+regularConvert(hxBarCodeRule.getOutsideMachineContentTwo()).replace(";","|")+")\\w+")){
							flag =true;
						}
					}
				}
				
				if(barCode.length()!=hxBarCodeRule.getBarCodeNumber()){
					flag = false;
				}
				
				if(!flag&&i==hxBarCodeRules.size()-1){
					message.append("机型条形码规则配置中未通过!");
				}else if(flag){
					break;
				}
				
			}
		
		}catch(Exception e){
			message.append("条形码校验异常");
			e.printStackTrace();
		}
		return message.toString();
	}
	
	private String regularConvert(String expr){
		if(config.get(expr)!=null){
			return config.get(expr);
		}
		return expr;
	}

	@Override
	public Map<String, String> splitMachineCode(String MachineCode) {
		Map<String, String> map = new HashMap<String, String>();
		
		String insideCode = "";
		String outsideCode = "";
		
		// 伊莱克斯
		if(MachineCode.indexOf('/')==-1){
			// 整机
			if(MachineCode.indexOf('-')==-1){
				insideCode = MachineCode + "-G";
				outsideCode = MachineCode + "-W";
				map.put("insideCode", insideCode);
				map.put("outsideCode", outsideCode);
			// 内机、外机	
			}else if(MachineCode.indexOf("-G")!=-1){
				map.put("insideCode", MachineCode);
			}else if(MachineCode.indexOf("-W")!=-1){
				map.put("outsideCode", MachineCode);
			}else{
				map.put("insideCode", MachineCode);
			}
		// 三洋	
		}else if(MachineCode.indexOf('/')!=-1){
			if(MachineCode.indexOf("GW/")!=-1){
				insideCode = MachineCode.replaceFirst("GW/", "G/");
				outsideCode = MachineCode.replaceAll("GW/", "W/");
				map.put("insideCode", insideCode);
				map.put("outsideCode", outsideCode);
			}else if(MachineCode.indexOf("G/")!=-1){
				map.put("insideCode", MachineCode);
			}else if(MachineCode.indexOf("W/")!=-1){
				map.put("outsideCode", MachineCode);
			}
		}
		return map;
	}
	
}

















