package com.gome.gmhx.service.sysconfig.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.gome.common.page.Page;
import com.gome.gmhx.dao.sysconfig.HxPositionDao;
import com.gome.gmhx.entity.HXPositionMapping;
import com.gome.gmhx.entity.EccGoodsCategory;
import com.gome.gmhx.entity.HxPosition;
import com.gome.gmhx.service.sysconfig.HxPositionService;

@Service("hxPositionService")
public class HxPositionServiceImpl implements HxPositionService {
	@Resource
	private HxPositionDao hxPositionDao;

	@Override
	public List<Map<String, Object>> getPositionPageList(Page page) {
		return hxPositionDao.getPositionPageList(page);
	}

	@Override
	public void addPosition(HxPosition position) {
		hxPositionDao.addPosition(position);
	}
	
	@Override
	public HxPosition getPositionById(String positionId) {
		return hxPositionDao.getPositionById(positionId);
	}

	@Override
	public void updatePosition(HxPosition position) {
		hxPositionDao.updatePosition(position);
	}

	@Override
	public List<HxPosition> getPositionByCode(String positionId) {
		return hxPositionDao.getPositionByCode(positionId);
	}

	@Override
	public List<HxPosition> getPositionByCodeAndName(HXPositionMapping positionMapping) {
		return null;
		// TODO Auto-generated method stub
		
	}

	@Override
	public List<Map<String, Object>> getPositionPageListBYCodeName(Page page) {
		return hxPositionDao.getPositionPageListBYCodeName(page);
	}

	@Override
	public List<Map<String, Object>> getOtherPositionListBYCodeName(Page page) {
		return hxPositionDao.getOtherPositionListBYCodeName(page);
	}


	@Override
	public List<EccGoodsCategory> getPositionCategoryTree() {
		return hxPositionDao.getPositionCategoryTree();
	}

	@Override
	public List<EccGoodsCategory> getPositionCategoryTreeData(String positionId) {
		return hxPositionDao.getPositionCategoryTreeData(positionId);
	}

	@Override
	public void addPositionCategory(HxPosition hp) {
		hxPositionDao.addPositionCategory(hp);
	}

	@Override
	public void deletePositionCategoryByPositionId(String positionId) {
		hxPositionDao.deletePositionCategoryByPositionId(positionId);
	}

	@Override
	public List<Map<String, Object>> getOtherPositionPageListBYCodeName(
			Page page) {
		return hxPositionDao.getOtherPositionPageListBYCodeName(page);
	}

	@Override
	public Map<String, String> insertPositions(List<HxPosition> positions) {
		Map<String, String> resultMap = new HashMap<String, String>();
		String exists = "{";
		String success = "{";
		String failure = "{";
		
		for(int i=0 ; i< positions.size() ; i++){
			HxPosition position = positions.get(i);
			int count = hxPositionDao.checkPositionBycode(position.getPositionCode());
			if(count>0){
				exists +=(position.getPositionCode())+",";
			}else{
				String code =position.getPositionCode();
				String name=position.getPositionName();
				String orgid=position.getOrgId();
				String type=position.getPositionType();
				String orgin=position.getPositionOrigin();
				if(code==null || ("").equals(code.trim()) ||
						name==null || ("").equals(name.trim()) ||
								orgid==null || ("").equals(orgid.trim()) ||
										type==null || ("").equals(type.trim()) ||
												orgin==null || ("").equals(orgin.trim())){
					failure +=(i+2)+",";
				}else{
					try{
						hxPositionDao.addPosition(position);
						success +=(i+2)+",";
					}catch(Exception e){
						failure +=(i+2)+",";
					}
				}
			}
		}
		resultMap.put("exists", exists.length()==1 ? exists+"}":exists.subSequence(0, exists.length()-1)+"}");
		resultMap.put("success", success.length()==1 ? success+"}":success.subSequence(0, success.length()-1)+"}");
		resultMap.put("failure", failure.length()==1 ? failure+"}":failure.subSequence(0, failure.length()-1)+"}");
		return resultMap;
	}

	@Override
	public List<Map<String, Object>> getPositionExport(HxPosition hxPosition) {
		return hxPositionDao.getPositionExport(hxPosition);
	}


}
