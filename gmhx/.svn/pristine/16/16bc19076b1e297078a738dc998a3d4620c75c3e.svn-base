package com.gome.gmhx.controller.workflow;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.gome.common.Constrants;
import com.gome.common.page.Page;
import com.gome.common.util.BeanMapUtils;
import com.gome.common.util.JsonUtil;
import com.gome.gmhx.entity.HxMaterialManage;
import com.gome.gmhx.entity.HxServiceLongDistance;
import com.gome.gmhx.entity.HxUser;
import com.gome.gmhx.entity.vo.HxJBPMOrderVO;
import com.gome.gmhx.jbpm.JbpmProcessDefinations;
import com.gome.gmhx.jbpm.JbpmService;
import com.gome.gmhx.jbpm.JbpmTaskTrajectory;
import com.gome.gmhx.jbpm.JbpmTransactions;
import com.gome.gmhx.service.materialmanage.HxMaterialService;
import com.gome.gmhx.service.servicemanage.HxInstallProjectService;
import com.gome.gmhx.service.servicemanage.HxLongDistanceService;
import com.gome.gmhx.service.sysconfig.HxUserService;
import com.gome.gmhx.service.workflow.HxWorkFlowService;

@Controller
@RequestMapping(value="/hxWorkFlow")
public class HxWorkFlowController {
	
	@Resource
	private HxWorkFlowService hxWorkFlowService;
	
	@Resource
	private JbpmService jbpmService;
	
	@Resource
	private HxMaterialService hxMaterialService;
	
	@Resource
	private HxUserService hxUserService;
	
	@Resource
	HxLongDistanceService longDistanceService;

	@Resource
	private HxInstallProjectService installProjectService;

	@RequestMapping(value="/list")
	public String workList(){
		return "workflow/workList";
	}
	
	@RequestMapping(value="/done")
	public String workDone(){
		return "workflow/workDone";
	}
	
	@RequestMapping(value="/ing")
	public String workIng(){
		return "workflow/workIng";
	}
	
	@RequestMapping(value="/monitoring")
	public String workMonitoring(){
		return "workflow/workMonitoring";
	}
	
	@RequestMapping(value="/getWorkPageList", produces="text/plain;charset=utf-8")
	@ResponseBody
	public String getWorkPageList(Page page,HxJBPMOrderVO order,@DateTimeFormat(pattern="yyyy-MM-dd")Date ksrq, @DateTimeFormat(pattern="yyyy-MM-dd")Date jsrq,
			@DateTimeFormat(pattern="yyyy-MM-dd")Date operksrq,@DateTimeFormat(pattern="yyyy-MM-dd")Date operjsrq) throws Exception{
		Map<String, Object> map = BeanMapUtils.convertBean(order);
		map.put("ksrq", ksrq);
		map.put("jsrq", jsrq);
		map.put("operksrq", operksrq);
		map.put("operjsrq", operjsrq);
		page.setParam(map);
		List<Map<String, Object>> list = hxWorkFlowService.getWorkPageList(page);
		return JsonUtil.writeListToDataGrid(page.getTotalResult(), list);
	}
	
	
	@RequestMapping(value="/updateJbpmWorkEntity", produces="text/plain;charset=UTF-8")
    public @ResponseBody String updateJbpmWorkEntity(HttpServletRequest request,String workEntityId,String checkAgree,String approveComment,String orderType) throws Exception{
        String result = null;
        try {
            if("1".equals(checkAgree)){
            	hxWorkFlowService.updateJbpmWorkEntity(workEntityId,JbpmTransactions.transactionPass, approveComment,orderType,checkAgree);
            	result = "同意成功，该流程继续向下执行!";
            }else if("0".equals(checkAgree)){
            	hxWorkFlowService.updateJbpmWorkEntity(workEntityId,JbpmTransactions.transactionRefuse, approveComment,orderType,checkAgree);
            	result = "不同意成功，该流程无法向下执行!";
            }else if("2".equals(checkAgree)){
            	hxWorkFlowService.updateJbpmWorkEntity(workEntityId, JbpmTransactions.transactionReturnModify, approveComment, orderType, checkAgree);
            	result = "退回修改，该流程无法向下执行!";
            }
        } catch (Exception e) {
            e.printStackTrace();
            result = "服务器异常";
        }
        return result;
    }
	
	
	@RequestMapping(value="/statusOperator")
	public ModelAndView statusOperator(HttpServletRequest request,HxJBPMOrderVO order){
//		ModelAndView mav = new ModelAndView("workflow/workCheck");
		ModelAndView mav = new ModelAndView("workflow/workProcess");
		String codekey = "";
        if(order.getProcessInstanceId()!=null && order.getProcessInstanceId().contains(".")){
        		String[] processInstanceIdSplit = order.getProcessInstanceId().split("\\.");
        		codekey=processInstanceIdSplit[0];
        		if(JbpmProcessDefinations.remoteInstallationFeeApplication.equals(codekey)){
        			HxServiceLongDistance distanceApply = longDistanceService.getDistanceApplyById(order.getListNumber());
        			order.setStatus(distanceApply.getStatus());
        			mav.addObject("distanceApply", distanceApply);
        		}else if(JbpmProcessDefinations.engineeringMachineServiceApply.equals(codekey)){
        			Map<String,Object> map = installProjectService.getInstallProjectById(order.getListNumber());
        			mav.addObject("map", map);
        		}else{
        			HxMaterialManage manage = hxMaterialService.getHxMaterialManage(order.getListNumber());
        			order.setStatus(manage.getStatus());
        			String applicant=manage.getApplicant();
        			if(applicant!=null && applicant.trim().contains("_")){
        				String[] array=applicant.split("_");
        				HxUser applicantUser = hxUserService.queryUserByUserLoginName(array[array.length-1]);
        				manage.setApplicant(applicantUser.getUserName());
        				mav.addObject("m", manage);
        				mav.addObject("title", Constrants.FITTING_TITLE_MAP.get(manage.getType()));
        			}
        		}
        }
		mav.addObject("codekey", codekey);
		mav.addObject("order", order);
		return mav;
	}
	
	@RequestMapping(value="/getTaskTrajeCttoryPageList/{listNumber}", produces="text/plain;charset=utf-8")
	@ResponseBody
	public String getTaskTrajeCttoryPageList(@PathVariable String listNumber,Page page) throws Exception{
		String workEntityId=listNumber;
		JbpmTaskTrajectory task=new JbpmTaskTrajectory();
		task.setWorkEntityId(workEntityId);
		page.setParam(task);
		List<Map<String, Object>> list=hxWorkFlowService.getTaskTrajeCttoryPageList(page);
		return JsonUtil.writeListToDataGrid(page.getTotalResult(), list);
	}
	
	@RequestMapping(value="/changeToName", produces="text/plain;charset=UTF-8")
    public @ResponseBody String changeToName(String value,String type) throws Exception{
        String result = "";
        try {
			if("1".equals(type) && value!=null && value.trim().contains("_")){
				String[] array=value.split("_");
				HxUser applicantUser = hxUserService.queryUserByUserLoginName(array[array.length-1]);
				result=applicantUser.getUserName();
			}else if(value!=null && value.trim().contains("_")){
				if(value.contains(",")){
					String[] arrayFa=value.split(",");
					for(String str:arrayFa){
						String[] array=str.split("_");
						HxUser applicantUser = hxUserService.queryUserByUserLoginName(array[array.length-1]);
						result+=applicantUser.getUserName()+",";
					}
					result=result.substring(0, result.length()-1);
				}else{
					String[] array=value.split("_");
					HxUser applicantUser = hxUserService.queryUserByUserLoginName(array[array.length-1]);
					result=applicantUser.getUserName();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
            result = "服务器异常";
		}
        return result;
    }
	
	@RequestMapping(value="/processInstanceIdToVal", produces="text/plain;charset=UTF-8")
    public @ResponseBody String processInstanceIdToVal(String processInstanceId) throws Exception{
        String result = null;
        try {
        	if(processInstanceId!=null && processInstanceId.contains(".")){
        		String[] processInstanceIdSplit = processInstanceId.split("\\.");
        		result=hxWorkFlowService.processInstanceIdToVal(processInstanceIdSplit[0]);
        	}
        } catch (Exception e) {
            e.printStackTrace();
            result = "服务器异常";
        }
        return result;
    }
}
