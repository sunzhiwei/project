package com.gome.gmhx.controller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gome.common.Constrants;
import com.gome.common.util.MD5EncryptUtils;
import com.gome.gmhx.entity.HxUser;
import com.gome.gmhx.entity.SysUser;
import com.gome.gmhx.service.sysconfig.HxUserService;
import com.gome.gmhx.service.wsdl.service.EmpService;
import com.gome.gmhx.service.wsdl.service.JlAccountService;

@Controller
public class LoginController {
	
	@Resource
	private HxUserService userService;
	
	@Resource
	private EmpService empService;
	
	@Resource
	private JlAccountService accountService;
	
	@RequestMapping(value="/toLogin")
	public String toLogin(){
		return "login";
	}
	
	@RequestMapping(value="/login",method=RequestMethod.POST)
	@ResponseBody
	public String login(HttpServletRequest request){
		String indexLoginId = request.getParameter("indexLoginId");
		String indexLoginPwd = request.getParameter("indexLoginPwd");
		//String indexLoginType = request.getParameter("indexLoginType");
		String indexVerificationcode = request.getParameter("indexVerificationcode");
		//获取session中放的验证码（谷歌开源工具KAPTCHA生成）的值
		String verificationcodeTemp = (String) request.getSession().getAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);
		
		if(StringUtils.isBlank(indexLoginId)) return "{\"flag\" : \"loginIdNull\"}";
		if(StringUtils.isBlank(indexLoginPwd)) return "{\"flag\" : \"loginPwdNull\"}";
		if(StringUtils.isBlank(indexVerificationcode))return "{\"flag\" : \"verificationcodeNull\"}";
		
		SysUser sysUser = null;
		HxUser hxUser = userService.queryUserByUserLoginName(indexLoginId);//从用户转储表中查询用户信息
		String indexLoginType = hxUser.getFromType();
		
		if(Constrants.GOME_USER.equals(indexLoginType)){
			sysUser = empService.getAccountByApAccount(indexLoginId);//身份管理平台导入用户
			if(sysUser==null){
				return "{\"flag\" : \"userNull\"}";
			}else{
				if(!indexLoginPwd.equals(sysUser.getUserPassword())){
					//密码错误之后session中的验证码值置空（防止暴力破解）
					request.getSession().removeAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);
					return "{\"flag\" : \"loginPwdError\"}";
				}
				//状态(1，在职，3，离职，5，锁定)
				String userState = sysUser.getUserState();
				if(StringUtils.isNotBlank(userState)){
					if("3".equals(userState)){
						return "{\"flag\" : \"loginDimission\"}";
					}else if("5".equals(userState)){
						return "{\"flag\" : \"loginLock\"}";
					}
				}
			}
		}else if(Constrants.THIRD_NETWORK_USER.equals(indexLoginType)){
			sysUser = accountService.selectAccountByPrimaryKey(indexLoginId);//第三方网点用户
			if(sysUser==null){
				return "{\"flag\" : \"userNull\"}";
			}else{
				if(!MD5EncryptUtils.MD5Encode(indexLoginPwd).equals(sysUser.getUserPassword())){//第三方网点用户密码使用了md5加密
					//密码错误之后session中的验证码值置空（防止暴力破解）
					request.getSession().removeAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);
					return "{\"flag\" : \"loginPwdError\"}";
				}
				//状态(0正常 1锁定)
				String userState = sysUser.getUserState();
				if(StringUtils.isNotBlank(userState)){
					if("1".equals(userState)){
						return "{\"flag\" : \"loginLock\"}";
					}
				}
			}
		}else if(Constrants.SYS_DEFINE_USER.equals(indexLoginType)){
			sysUser = userService.getUserByUserLoginName(indexLoginId);//系统创建用户
			if(sysUser==null){
				return "{\"flag\" : \"userNull\"}";
			}else{
				if(!MD5EncryptUtils.MD5Encode(indexLoginPwd).equals(sysUser.getUserPassword())){
					//密码错误之后session中的验证码值置空（防止暴力破解）
					request.getSession().removeAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);
					return "{\"flag\" : \"loginPwdError\"}";
				}
				//状态(0，锁定，1，解锁)
				String userState = sysUser.getUserState();
				if(StringUtils.isNotBlank(userState)){
					if("0".equals(userState)){
						return "{\"flag\" : \"loginLock\"}";
					}
				}
			}
		}
		request.getSession().setAttribute(Constrants.USER_INFO, sysUser);
		if(StringUtils.isNotBlank(verificationcodeTemp)){
			if(!verificationcodeTemp.equalsIgnoreCase(indexVerificationcode)){//验证码输入错误
				//密码错误之后session中的验证码值置空（防止暴力破解）
				request.getSession().removeAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);
				return "{\"flag\" : \"verificationcodeError\"}";
			}else{
				request.getSession().setAttribute(Constrants.USER_INFO, sysUser);
				return "{\"flag\" : \"success\"}";
			}
		}
		return null;
	}
	
	@RequestMapping(value="/login",method=RequestMethod.GET)
	public String loginGet(HttpServletRequest request, HttpServletResponse response){
		return "login";
	}
	@RequestMapping(value="/index")
	public String index(){
		return "index";
	}
	@RequestMapping(value="/toValidateAuth")
	public String toValidateAuth(){
		return "validateAuth";
	}
	@RequestMapping(value="/validateAuth", produces="text/plain;charset=utf-8")
	@ResponseBody
	public String validateAuth(HttpServletRequest request){
		SysUser sysUser = (SysUser)request.getSession().getAttribute(Constrants.USER_INFO);
		List<Map<String, String>> list = userService.getFittingPosition(sysUser);
		if(list == null || list.isEmpty()){
			return "true";
		}else{
			if(list.size() == 1){
				sysUser.setFittingPositionId(list.get(0).get("positionId"));
				sysUser.setFittingPositionId(list.get(0).get("positionId"));
				sysUser.setFittingOrgId(list.get(0).get("positionType"));
				request.getSession().setAttribute(Constrants.USER_INFO, sysUser);
				return "true";
			}else{
				JSONArray array = new JSONArray();
				for(Map<String, String> map : list){
					JSONObject object = new JSONObject();
					object.put("positionType", map.get("positionType"));
					object.put("positionId", map.get("positionId"));
					object.put("positionName", map.get("positionName"));
					object.put("orgId", map.get("orgId"));
					object.put("orgName", map.get("orgName"));
					array.add(object);
				}
				return array.toString();
			}
		}
	}
	
	@RequestMapping(value="/fittingPosition", produces="text/plain;charset=utf-8")
	public String fittingPosition(HttpServletRequest request, String orgId, String positionId, String positionType){
		SysUser sysUser = (SysUser)request.getSession().getAttribute(Constrants.USER_INFO);
		sysUser.setFittingOrgId(orgId);
		sysUser.setFittingPositionId(positionId);
		sysUser.setFittingPositionType(Integer.parseInt(positionType));
		request.getSession().setAttribute(Constrants.USER_INFO, sysUser);
		return "index";
	}
}
