package com.gome.gmhx.service.materialmanage.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.gome.common.page.Page;
import com.gome.common.util.DateUtils;
import com.gome.gmhx.dao.materialmanage.HxMaterialDao;
import com.gome.gmhx.dao.orgmanage.HxLimitDao;
import com.gome.gmhx.dao.storeinfo.HxCurrentStockDao;
import com.gome.gmhx.entity.HxCurrentStock;
import com.gome.gmhx.entity.HxLimit;
import com.gome.gmhx.entity.HxMaterialDetail;
import com.gome.gmhx.entity.HxMaterialManage;
import com.gome.gmhx.jbpm.JbpmProcessDefinations;
import com.gome.gmhx.jbpm.JbpmService;
import com.gome.gmhx.jbpm.JbpmTransactions;
import com.gome.gmhx.jbpm.JbpmWorkEntityStatus;
import com.gome.gmhx.service.materialmanage.HxMaterialService;

@Service("hxMaterialService")
public class HxMaterialSeviceImpl implements HxMaterialService {
	@Resource
	private HxMaterialDao hxMaterialDao;
	@Resource
	private HxCurrentStockDao hxCurrentStockDao;
	@Resource
	private HxLimitDao hxLimitDao;
	@Resource
	JbpmService jbpmService;

	@Override
	public List<String> getFittingBySuit(String suitModel) {
		return hxMaterialDao.getFittingBySuit(suitModel);
	}

	@Override
	public Map<String, Object> getFittingInfo(Map<String, Object> map) {
		return hxMaterialDao.getFittingInfo(map);
	}

	@Override
	@SuppressWarnings("unchecked")
	public void addHxMaterial(Map<String, Object> map) {
		HxMaterialManage manage = (HxMaterialManage)map.get("manage");
		hxMaterialDao.addHxMaterialManage(manage);
		List<HxMaterialDetail> detailList = (List<HxMaterialDetail>)map.get("detail");
		for(HxMaterialDetail hxMaterialDetail : detailList){
			hxMaterialDetail.setListNumber(manage.getListNumber());
		}
		hxMaterialDao.addHxMaterialDetail(detailList);
	}

	@Override
	public String getListNumber(String companyId) {
		return hxMaterialDao.getListNumber(companyId);
	}
	
	@Override
	public HxMaterialManage getHxMaterialManage(String listNumber) {
		return hxMaterialDao.getHxMaterialManage(listNumber);
	}

	@Override
	public String getFatherFittingOrgId(String fittingOrgId) {
		return hxMaterialDao.getFatherFittingOrgId(fittingOrgId);
	}

	@Override
	public List<Map<String, Object>> getHxMaterialPageList(Page page) {
		return hxMaterialDao.getHxMaterialPageList(page);
	}

	@Override
	public List<Map<String, Object>> getHxMaterialDetail(String listNumber) {
		HxMaterialManage hmm = hxMaterialDao.getHxMaterialManage(listNumber);
		String type = hmm.getType();
		Map<String, Object> stockMap = new HashMap<String, Object>();
		stockMap.put("listNumber", listNumber);
		if(type.indexOf("-o-") > 0){
			stockMap.put("isNew", 0);
		}else{
			stockMap.put("isNew", 1);
		}

		return hxMaterialDao.getHxMaterialDetail2(stockMap);
	}
	
	@Override
	public List<Map<String, Object>> getHxMaterialDetails(String listNumber) {
		return hxMaterialDao.getHxMaterialDetail(listNumber);
	}

	@Override
	public void delHxMaterial(String listNumber) {
		hxMaterialDao.delHxMaterialDetail(listNumber);
		hxMaterialDao.delHxMaterialManage(listNumber);
	}

	@Override
	public void updateStatus(Map<String, String> map) {
		hxMaterialDao.updateStatus(map);
	}

	@Override
	@SuppressWarnings("unchecked")
	public void updateCurrentStock(Map<String, Object> map) throws Exception {
		String type = String.valueOf(map.get("authId"));
		HxMaterialManage manage = (HxMaterialManage)map.get("manage");
		if(type.indexOf("-n-") > 0){
			map.put("isNew", 1);
		}
		if(type.indexOf("-o-") > 0){
			map.put("isNew", 0);
		}
		if(type.indexOf("-rk-") > 0){
			List<HxMaterialDetail> details = (List<HxMaterialDetail>)map.get("detail");
			for(HxMaterialDetail hxMaterialDetail : details){
				Map<String, Object> newMap = new HashMap<String, Object>();
				newMap.put("fittingCode", hxMaterialDetail.getFittingCode());
				newMap.put("isNew", map.get("isNew"));
				newMap.put("companyId", manage.getReceiveCompany());
				HxCurrentStock hxCurrentStock = hxMaterialDao.isExist(newMap);
				
				newMap.put("stock", hxMaterialDetail.getApplyCount());
				if(hxCurrentStock == null){
					if(type.startsWith("zb-")){
						newMap.put("type", 0);
					}
					if(type.startsWith("fb-")){
						newMap.put("type", 1);
					}
					if(type.startsWith("wd-")){
						newMap.put("type", 2);
					}
					hxMaterialDao.insertRkCount(newMap);
				}else{
					hxMaterialDao.updateRkCount(newMap);
				}
			}
		}
		if(type.indexOf("-ck-") > 0){
			map.put("companyId", manage.getSendCompany());
			hxMaterialDao.updateCkCount(map);
		}
		Map<String, String> statusMap = new HashMap<String, String>();
		statusMap.put("listNumber", manage.getListNumber());
		statusMap.put("status", "03");
		hxMaterialDao.updateStatus(statusMap);
	}

	@Override
	public List<Map<String, Object>> getHxMaterialDetailForUpdate(Map<String, Object> map) {
		return hxMaterialDao.getHxMaterialDetailForUpdate(map);
	}

	@Override
	@SuppressWarnings("unchecked")
	public void updateHxMaterial(Map<String, Object> map) {
		HxMaterialManage manage = (HxMaterialManage)map.get("manage");
		hxMaterialDao.updateHxMaterialManage(manage);
		List<HxMaterialDetail> detailList = (List<HxMaterialDetail>)map.get("detail");
		for(HxMaterialDetail hxMaterialDetail : detailList){
			hxMaterialDetail.setListNumber(manage.getListNumber());
		}
		hxMaterialDao.delHxMaterialDetail(manage.getListNumber());
		hxMaterialDao.addHxMaterialDetail(detailList);
	}

	@Override
	public void hxMaterialSend(String listNumber, String type) {
		String processDefineKey = JbpmProcessDefinations.getProcessDefinations(type);
		HxMaterialManage hmm = this.hxMaterialDao.getHxMaterialManage(listNumber);
		this.jbpmService.startProcessInstanceByKey(processDefineKey, hmm);
		this.hxMaterialDao.updateHxMaterialManage(hmm);
	}

	@Override
	public void updateHxMaterialManage(String listNumber,String transactionpass, String type) {
		HxMaterialManage hmm = this.hxMaterialDao.getHxMaterialManage(listNumber);
		this.jbpmService.completeTask(hmm, transactionpass, type);
		this.hxMaterialDao.updateHxMaterialManage(hmm);
	}

	@Override
	public void updateHxMaterialDetails(ArrayList<HxMaterialDetail> list) {
		if(list != null && list.size() >0){
			String listNumber = list.get(0).getListNumber();
			HxMaterialManage manage = this.hxMaterialDao.getHxMaterialManage(listNumber);
			this.jbpmService.completeTask(manage, JbpmTransactions.transactionOperationComplete, "确认出库数量");
			for (HxMaterialDetail detail : list) {
				this.hxMaterialDao.updateHxMaterialDetail(detail);
			}
			Map<String, String> map = new HashMap<String, String>();
			map.put("status", JbpmWorkEntityStatus.status_out_bound);
			map.put("listNumber", listNumber);
			this.hxMaterialDao.updateStatus(map);
		}
	}

	@Override
	public void reduceStock(String listNumber) {
		HxMaterialManage hmm = this.hxMaterialDao.getHxMaterialManage(listNumber);
		Map<String, Object> stockMap = new HashMap<String, Object>();
		stockMap.put("listNumber", listNumber);
		String type = hmm.getType();
		boolean isNew = (type.indexOf("-o-") > 0) ? false: true;
		if(type.indexOf("-o-") > 0){
			stockMap.put("isNew", 0);
		}else{
			stockMap.put("isNew", 1);
		}
		List<Map<String, Object >> list = this.hxMaterialDao.getHxMaterialDetail2(stockMap);
		this.jbpmService.completeTask(hmm, JbpmTransactions.transactionOperationComplete, "确认出库");
		Long total = 0L;
		for (Map<String, Object> map : list) {
			HxCurrentStock stock = new HxCurrentStock();
			String orgId = (String)map.get("send_company");
			stock.setOrgId(orgId);
			stock.setFittingCode((String)map.get("fitting_code"));
			stock.setIsNew(isNew);
			Integer tmpCurrentStock = this.hxCurrentStockDao.getCurrentStock(stock);
			Integer audit = (Integer)map.get("audit_count");
			if(tmpCurrentStock < audit){
				throw new RuntimeException(stock.getFittingCode()+" 出库量不足");
			}
			stock.setStock(tmpCurrentStock - audit);
//			stock.setStock(stock.getCountWay() + audit);
			this.hxCurrentStockDao.updateHxCurrentStock(stock);
			total = total + audit *((Float) map.get("price")).longValue();
		}
		//网点新料申请, 出库时减少费用额度
		if(type.startsWith("wd") && type.indexOf("sq") > 0){
			HxLimit limit = hxLimitDao.getLimitByOrgId(hmm.getReceiveCompany());
			if(limit != null){
				Long availablity = limit.getLimitCash() + limit.getLimitCredit();
				if(total < availablity){
					if(total < limit.getLimitCash()){
						limit.setLimitCash(limit.getLimitCash()-total);
						this.hxLimitDao.updateLimit(limit);
					}else{
						Long less = total - limit.getLimitCash();
						limit.setLimitCash(0L);
						limit.setLimitCredit(limit.getLimitCredit()-less);
						this.hxLimitDao.updateLimit(limit);
					}
				}else{
					throw new RuntimeException("申请费用超出收货单位额度");
				}
			}
		}
		//更新申请单状态
		Map<String, String> map = new HashMap<String, String>();
		map.put("status", JbpmWorkEntityStatus.status_post_sending);
		map.put("listNumber", listNumber);
		this.hxMaterialDao.updateStatus(map);
		
		hmm.setSendNumber(getSendNumber(hmm.getSendCompany()));
		hmm.setUpdateTime(Calendar.getInstance().getTime());
		//生成发货单号
		this.hxMaterialDao.updateHxMaterialManage(hmm);
	}
	
	/*
	 * 根据发货单位获取发货单号
	 */
	private String getSendNumber(String companyId){
		StringBuilder sb = new StringBuilder("FH-");
		sb.append(companyId);
		sb.append("-");
		String date = DateUtils.formatDateTime(new Date(), DateUtils.EIGHT_STYLE_DATE_FORMAT);
		sb.append(date.substring(2, 8));
		sb.append(hxMaterialDao.getSendNumber(companyId));
		return sb.toString();
	}

	@Override
	public String getWebFittingOrgId(String fittingOrgId) {
		return this.hxMaterialDao.getWebFittingOrgId(fittingOrgId);
	}

}
